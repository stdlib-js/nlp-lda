{"version":3,"file":"index.mjs","sources":["../lib/matrix.js","../lib/get_thetas.js","../lib/validate.js","../lib/get_phis.js","../lib/init.js","../lib/avg_matrix.js","../lib/fit.js","../lib/lda.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Int32Array = require( '@stdlib/array-int32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Returns a Matrix instance.\n*\n* @private\n* @constructor\n* @param {NumberArray} shape - matrix dimensions/shape\n* @param {string} [dtype=\"float64\"] - matrix data type\n* @returns {Matrix} Matrix instance\n*/\nfunction matrix() {\n\tvar dtype;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar len;\n\tvar mat;\n\tvar i;\n\n\tif ( arguments.length === 1 ) {\n\t\tshape = arguments[ 0 ];\n\t}\n\telse if ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tdtype = arguments[ 1 ];\n\t}\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Initialize a zero-filled typed array...\n\tif ( dtype === 'int32' ) {\n\t\tdata = new Int32Array( len );\n\t}\n\telse {\n\t\tdata = new Float64Array( len );\n\t}\n\n\t// Return a new Matrix instance:\n\tmat = {};\n\tmat.dtype = dtype;\n\tmat.shape = shape;\n\tmat.strides = [ shape[1], 1 ];\n\tmat.offset = 0;\n\tmat.ndims = shape.length;\n\tmat.length = data.length;\n\tmat.nbytes = data.byteLength;\n\tmat.data = data;\n\n\tsetReadOnly( mat, 'get', get );\n\tsetReadOnly( mat, 'set', set );\n\treturn mat;\n\n\t/**\n\t* Returns a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @returns {(number|undefined)} matrix element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\treturn this.data[ idx ];\n\t}\n\n\t/**\n\t* Sets a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @param {number} v - value to set\n\t* @returns {Matrix} Matrix instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\ti = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\tif ( i >= 0 ) {\n\t\t\tthis.data[ i ] = v;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = matrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Get theta matrix. Its rows correspond to document distributions over topics.\n*\n* @private\n* @returns {Matrix} theta parameter matrix\n*/\nfunction getThetas() {\n\t/* eslint-disable no-invalid-this */\n\tvar Theta;\n\tvar val;\n\tvar d;\n\tvar k;\n\n\tTheta = matrix( [ this.D, this.K ] );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tfor ( k = 0; k < this.K; k++ ) {\n\t\t\tval = ( this.nd.get( d, k ) + this.alpha ) /\n\t\t\t\t( this.ndSum[ d ] + ( this.K*this.alpha ) );\n\t\t\tTheta.set( d, k, val );\n\t\t}\n\t}\n\treturn Theta;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getThetas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi\n* @returns {(Error|null)} null or an error object\n*\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isPositive( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'beta' ) ) {\n\t\topts.beta = options.beta;\n\t\tif ( !isPositive( opts.beta ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'beta', opts.beta ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Get the phi matrix. Each row is a topic distribution over words.\n*\n* @private\n* @returns {Matrix} phi parameter matrix\n*/\nfunction getPhis() {\n\t/* eslint-disable no-invalid-this */\n\tvar Phi;\n\tvar val;\n\tvar k;\n\tvar w;\n\n\tPhi = matrix( [ this.K, this.W ] );\n\tfor ( k = 0; k < this.K; k++ ) {\n\t\tfor ( w = 0; w < this.W; w++ ) {\n\t\t\tval = ( this.nw.get( w, k ) + this.beta ) /\n\t\t\t\t( this.nwSum[ k ] + ( this.W*this.beta ) );\n\t\t\tPhi.set( k, w, val );\n\t\t}\n\t}\n\treturn Phi;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getPhis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar randu = require( '@stdlib/random-base-randu' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Randomly assign topics to words and keep track of the counts.\n*\n* @private\n*/\nfunction init() {\n\t/* eslint-disable no-invalid-this */\n\tvar topic;\n\tvar newz;\n\tvar len;\n\tvar wt;\n\tvar d;\n\tvar i;\n\n\tthis.z = [];\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tthis.z.push( [] );\n\t\tlen = this.w[ d ].length;\n\n\t\t// Initialize random topics...\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tnewz = floor( randu() * this.K );\n\t\t\tthis.z[ d ].push( newz );\n\t\t}\n\t\tthis.ndSum[ d ] = len;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\twt = this.w[ d ][ i ];\n\t\t\ttopic = this.z[ d ][ i ];\n\n\t\t\t// Number of instances of word i assigned to topic j:\n\t\t\tthis.nw.set( wt, topic, this.nw.get( wt, topic ) + 1 );\n\n\t\t\t// Number of words in document i assigned to topic j:\n\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\n\t\t\t// Total number of words assigned to topic j:\n\t\t\tthis.nwSum[ topic ] = this.nwSum[ topic ] + 1;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = init;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Calculate weighted average of two matrices.\n*\n* @private\n* @param {Matrix} A - first matrix\n* @param {Matrix} B - second matrix\n* @param {PositiveInteger} weight - relative weight of matrix A\n* @returns {Matrix} averaged matrix\n*/\nfunction avgMatrix( A, B, weight ) {\n\tvar propA;\n\tvar propB;\n\tvar nrow;\n\tvar ncol;\n\tvar val;\n\tvar C;\n\tvar i;\n\tvar j;\n\n\tnrow = A.shape[ 0 ];\n\tncol = A.shape[ 1 ];\n\tC = matrix( [ nrow, ncol ] );\n\tpropA = ( weight - 1.0 ) / weight;\n\tpropB = 1.0 / weight;\n\n\tfor ( i = 0; i < nrow; i++ ) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\tval = (propA * A.get(i, j)) + (propB * B.get(i, j));\n\t\t\tC.set( i, j, val );\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nmodule.exports = avgMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar format = require( '@stdlib/string-format' );\nvar randu = require( '@stdlib/random-base-randu' );\nvar avgMatrix = require( './avg_matrix.js' );\n\n\n// MAIN //\n\n/**\n* Fit model using collapsed Gibbs sampling.\n*\n* @private\n* @param {PositiveInteger} iter - number of sampling iterations\n* @param {PositiveInteger} burnin - number of estimates to be thrown away at beginning\n* @param {PositiveInteger} thin - number of discarded in-between iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a positive integer\n*/\nfunction fit( iter, burnin, thin ) {\n\t/* eslint-disable no-invalid-this */\n\tvar kalpha;\n\tvar wbeta;\n\tvar topic;\n\tvar theta;\n\tvar prob;\n\tvar word;\n\tvar phi;\n\tvar len;\n\tvar nt;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar u;\n\tvar w;\n\n\tif ( !isPositiveInteger( iter ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', iter ) );\n\t}\n\tif ( !isPositiveInteger( burnin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', burnin ) );\n\t}\n\tif ( !isPositiveInteger( thin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a positive integer. Value: `%s`.', thin ) );\n\t}\n\n\twbeta = this.W * this.beta;\n\tkalpha = this.K * this.alpha;\n\n\tfor ( i = 0; i < iter; i++ ) {\n\t\tfor ( d = 0; d < this.D; d++ ) {\n\t\t\tfor ( w = 0; w < this.ndSum[ d ]; w++ ) {\n\t\t\t\tword = this.w[ d ][ w ];\n\t\t\t\ttopic = this.z[ d ][ w ];\n\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) - 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) - 1 );\n\t\t\t\tthis.ndSum[ d ] -= 1;\n\t\t\t\tthis.nwSum[ topic ] -= 1;\n\n\t\t\t\tprob = [];\n\t\t\t\tfor ( j = 0; j < this.K; j++ ) {\n\t\t\t\t\tprob.push( ( this.nw.get( word, j ) + this.beta ) /\n\t\t\t\t\t\t( this.nwSum[ j ] + wbeta ) *\n\t\t\t\t\t\t( this.nd.get( d, j ) + this.alpha ) /\n\t\t\t\t\t\t( this.ndSum[ d ] + kalpha ) );\n\t\t\t\t}\n\t\t\t\tfor ( j = 1; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] += prob[ j - 1 ];\n\t\t\t\t}\n\t\t\t\tu = prob[ this.K - 1 ] * randu();\n\t\t\t\ttopic = 0;\n\t\t\t\tfor ( nt = 0; nt < this.K; nt++ ) {\n\t\t\t\t\tif ( prob[ nt ] > u ) {\n\t\t\t\t\t\ttopic = nt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Assign new z_i to counts...\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) + 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\t\t\t\tthis.nwSum[ topic ] += 1;\n\t\t\t\tthis.ndSum[ d ] += 1;\n\n\t\t\t\tthis.z[ d ][ w ] = topic;\n\t\t\t}\n\t\t}\n\n\t\tif ( i % thin === 0 && i > burnin ) {\n\t\t\tphi = this.getPhis();\n\t\t\ttheta = this.getThetas();\n\n\t\t\tthis.phiList.push( phi );\n\t\t\tthis.thetaList.push( theta );\n\n\t\t\tlen = this.phiList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgPhi = phi;\n\t\t\t} else {\n\t\t\t\tthis.avgPhi = avgMatrix( this.avgPhi, phi, len );\n\t\t\t}\n\t\t\tlen = this.thetaList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgTheta = theta;\n\t\t\t} else {\n\t\t\t\tthis.avgTheta = avgMatrix( this.avgTheta, theta, len );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = fit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar tokenize = require( '@stdlib/nlp-tokenize' );\nvar Int32Array = require( '@stdlib/array-int32' );\nvar matrix = require( './matrix.js' );\nvar getThetas = require( './get_thetas.js' );\nvar validate = require( './validate.js' );\nvar getPhis = require( './get_phis.js' );\nvar init = require( './init.js' );\nvar fit = require( './fit.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Find index of the value in vocabulary equal to the supplied search value.\n*\n* @private\n* @param {Array} vocab - vocabulary\n* @param {string} searchVal - search value\n* @returns {integer} index in vocab if search value is found, -1 otherwise\n*/\nfunction findIndex( vocab, searchVal ) {\n\tvar i;\n\tfor ( i = 0; i < vocab.length; i++ ) {\n\t\tif ( vocab[ i ] === searchVal ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @param {StringArray} documents - document corpus\n* @param {PositiveInteger} K - number of topics\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.alpha=50/K] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta=0.1] - Dirichlet hyper-parameter for word vector phi\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} must provide valid options\n* @returns {Object} model object\n*/\nfunction lda( documents, K, options ) {\n\tvar target;\n\tvar vocab;\n\tvar model;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar err;\n\tvar pos;\n\tvar nd;\n\tvar it;\n\tvar wd;\n\tvar D;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar W;\n\tvar w;\n\n\tif ( !isStringArray( documents ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a string array. Value: `' + documents + '`.' );\n\t}\n\tif ( !isPositiveInteger( K ) ) {\n\t\tthrow new TypeError( 'invalid argument. Number of topics `K` must be a positive integer. Value: `' + K + '`.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Number of documents:\n\tD = documents.length;\n\n\t// Hyper-parameter for Dirichlet distribution of topic vector theta:\n\talpha = opts.alpha || 50 / K;\n\n\t// Hyper-parameter of Dirichlet distribution of phi:\n\tbeta = opts.beta || 0.1;\n\n\t// Extract words & construct vocabulary:s\n\tvocab = [];\n\tw = [];\n\tpos = 0;\n\tfor ( d = 0; d < D; d++ ) {\n\t\tw.push( [] );\n\t\twd = tokenize( documents[ d ] );\n\t\tnd = wd.length;\n\t\tfor ( i = 0; i < nd; i++ ) {\n\t\t\ttarget = wd[ i ];\n\t\t\tit = findIndex( vocab, target );\n\t\t\tif ( it === -1 ) {\n\t\t\t\tvocab.push( target );\n\t\t\t\tw[ d ].push( pos );\n\t\t\t\tpos += 1;\n\t\t\t} else {\n\t\t\t\tw[ d ].push( it );\n\t\t\t}\n\t\t}\n\t}\n\t// Size of vocabulary:\n\tW = vocab.length;\n\n\tmodel = {};\n\n\t// Attach read-only properties:\n\tsetReadOnly( model, 'K', K );\n\tsetReadOnly( model, 'D', D );\n\tsetReadOnly( model, 'W', W );\n\tsetReadOnly( model, 'alpha', alpha );\n\tsetReadOnly( model, 'beta', beta );\n\n\t// Attach methods:\n\tsetReadOnly( model, 'init', init );\n\tsetReadOnly( model, 'fit', fit );\n\tsetReadOnly( model, 'getPhis', getPhis );\n\tsetReadOnly( model, 'getThetas', getThetas );\n\tsetReadOnly( model, 'getTerms', getTerms );\n\n\tmodel.nwSum = new Int32Array( K );\n\tmodel.ndSum = new Int32Array( D );\n\tmodel.nw = matrix( [ W, K ], 'int32' );\n\tmodel.nd = matrix( [ D, K ], 'int32' );\n\n\tmodel.phiList = [];\n\tmodel.thetaList = [];\n\n\tmodel.w = w;\n\tmodel.init();\n\n\treturn model;\n\n\t/**\n\t* Get top terms for the specified topic.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} k - topic\n\t* @param {PositiveInteger} [no=10] - number of terms\n\t* @throws {TypeError} first argument must be a nonnegative integer smaller than the total number of topics\n\t* @throws {TypeError} second argument must be a positive integer\n\t* @returns {Array} word probability array\n\t*/\n\tfunction getTerms( k, no ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar skip;\n\t\tvar phi;\n\t\tvar ret;\n\t\tvar max;\n\t\tvar mid;\n\t\tvar i;\n\n\t\tif ( !isNonNegativeInteger( k ) || k >= K ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a nonnegative integer smaller than the total number of topics. Value: `' + k + '`.' );\n\t\t}\n\t\tif ( no ) {\n\t\t\tif ( !isPositiveInteger( no ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + no + '`.' );\n\t\t\t}\n\t\t} else {\n\t\t\tno = 10;\n\t\t}\n\n\t\tret = [];\n\t\tskip = [];\n\t\tfor ( i = 0; i < no; i++ ) {\n\t\t\tmax = 0;\n\t\t\tfor ( j = 0; j < this.W; j++ ) {\n\t\t\t\tphi = this.avgPhi.get( k, j );\n\t\t\t\tif ( phi > max && !contains( skip, j ) ) {\n\t\t\t\t\tmax = phi;\n\t\t\t\t\tmid = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tskip.push( mid );\n\t\t\tret.push({\n\t\t\t\t'word': vocab[ mid ],\n\t\t\t\t'prob': max\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = lda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @module @stdlib/nlp-lda\n*\n* @example\n* var lda = require( '@stdlib/nlp-lda' );\n*\n* var words;\n* var model;\n* var docs;\n*\n* docs = [\n*     'I loved you first',\n*     'For one is both and both are one in love',\n*     'You never see my pain',\n*     'My love is such that rivers cannot quench',\n*     'See a lot of pain, a lot of tears'\n* ];\n*\n* model = lda( docs, 2 );\n* // returns {}\n*\n* model.fit( 1000, 100, 10 );\n*\n* words = getTerms( 0, 3 );\n* // e.g., returns [ { word: 'both', prob: ~0.0632 }, { word: 'pain', prob: ~0.0552 }, ... ]\n*/\n\n// MODULES //\n\nvar lda = require( './lda.js' );\n\n\n// EXPORTS //\n\nmodule.exports = lda;\n"],"names":["Int32Array","require$$0","Float64Array","require$$1","setReadOnly","require$$2","matrix_1","dtype","ndims","shape","data","len","mat","i","arguments","length","strides","offset","nbytes","byteLength","get","set","j","idx","this","v","matrix","get_thetas","Theta","val","d","k","D","K","nd","alpha","ndSum","isPositive","isPrimitive","isObject","hasOwnProp","format","require$$3","randu","floor","isPositiveInteger","avgMatrix","A","B","weight","propA","propB","nrow","ncol","C","isNonNegativeInteger","isStringArray","contains","require$$4","tokenize","require$$5","require$$6","require$$7","getThetas","require$$8","validate","opts","options","TypeError","beta","getPhis","Phi","w","W","nw","nwSum","init","topic","newz","wt","z","push","fit","iter","burnin","thin","kalpha","wbeta","theta","prob","word","phi","nt","u","phiList","thetaList","avgPhi","avgTheta","findIndex","vocab","searchVal","lib","documents","target","model","err","pos","it","wd","getTerms","no","skip","ret","max","mid"],"mappings":"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"}
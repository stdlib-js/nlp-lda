{"version":3,"file":"index.mjs","sources":["../lib/matrix.js","../lib/get_thetas.js","../lib/validate.js","../lib/get_phis.js","../lib/init.js","../lib/avg_matrix.js","../lib/fit.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Int32Array from '@stdlib/array-int32';\nimport Float64Array from '@stdlib/array-float64';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\n\n\n// MAIN //\n\n/**\n* Returns a Matrix instance.\n*\n* @private\n* @constructor\n* @param {NumberArray} shape - matrix dimensions/shape\n* @param {string} [dtype=\"float64\"] - matrix data type\n* @returns {Matrix} Matrix instance\n*/\nfunction matrix() {\n\tvar dtype;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar len;\n\tvar mat;\n\tvar i;\n\n\tif ( arguments.length === 1 ) {\n\t\tshape = arguments[ 0 ];\n\t}\n\telse if ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tdtype = arguments[ 1 ];\n\t}\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Initialize a zero-filled typed array...\n\tif ( dtype === 'int32' ) {\n\t\tdata = new Int32Array( len );\n\t}\n\telse {\n\t\tdata = new Float64Array( len );\n\t}\n\n\t// Return a new Matrix instance:\n\tmat = {};\n\tmat.dtype = dtype;\n\tmat.shape = shape;\n\tmat.strides = [ shape[1], 1 ];\n\tmat.offset = 0;\n\tmat.ndims = shape.length;\n\tmat.length = data.length;\n\tmat.nbytes = data.byteLength;\n\tmat.data = data;\n\n\tsetReadOnly( mat, 'get', get );\n\tsetReadOnly( mat, 'set', set );\n\treturn mat;\n\n\t/**\n\t* Returns a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @returns {(number|undefined)} matrix element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\treturn this.data[ idx ];\n\t}\n\n\t/**\n\t* Sets a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @param {number} v - value to set\n\t* @returns {Matrix} Matrix instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\ti = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\tif ( i >= 0 ) {\n\t\t\tthis.data[ i ] = v;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default matrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Get theta matrix. Its rows correspond to document distributions over topics.\n*\n* @private\n* @returns {Matrix} theta parameter matrix\n*/\nfunction getThetas() {\n\t/* eslint-disable no-invalid-this */\n\tvar Theta;\n\tvar val;\n\tvar d;\n\tvar k;\n\n\tTheta = matrix( [ this.D, this.K ] );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tfor ( k = 0; k < this.K; k++ ) {\n\t\t\tval = ( this.nd.get( d, k ) + this.alpha ) /\n\t\t\t\t( this.ndSum[ d ] + ( this.K*this.alpha ) );\n\t\t\tTheta.set( d, k, val );\n\t\t}\n\t}\n\treturn Theta;\n}\n\n\n// EXPORTS //\n\nexport default getThetas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isPositive( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'beta' ) ) {\n\t\topts.beta = options.beta;\n\t\tif ( !isPositive( opts.beta ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'beta', opts.beta ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Get the phi matrix. Each row is a topic distribution over words.\n*\n* @private\n* @returns {Matrix} phi parameter matrix\n*/\nfunction getPhis() {\n\t/* eslint-disable no-invalid-this */\n\tvar Phi;\n\tvar val;\n\tvar k;\n\tvar w;\n\n\tPhi = matrix( [ this.K, this.W ] );\n\tfor ( k = 0; k < this.K; k++ ) {\n\t\tfor ( w = 0; w < this.W; w++ ) {\n\t\t\tval = ( this.nw.get( w, k ) + this.beta ) /\n\t\t\t\t( this.nwSum[ k ] + ( this.W*this.beta ) );\n\t\t\tPhi.set( k, w, val );\n\t\t}\n\t}\n\treturn Phi;\n}\n\n\n// EXPORTS //\n\nexport default getPhis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport randu from '@stdlib/random-base-randu';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Randomly assign topics to words and keep track of the counts.\n*\n* @private\n*/\nfunction init() {\n\t/* eslint-disable no-invalid-this */\n\tvar topic;\n\tvar newz;\n\tvar len;\n\tvar wt;\n\tvar d;\n\tvar i;\n\n\tthis.z = [];\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tthis.z.push( [] );\n\t\tlen = this.w[ d ].length;\n\n\t\t// Initialize random topics...\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tnewz = floor( randu() * this.K );\n\t\t\tthis.z[ d ].push( newz );\n\t\t}\n\t\tthis.ndSum[ d ] = len;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\twt = this.w[ d ][ i ];\n\t\t\ttopic = this.z[ d ][ i ];\n\n\t\t\t// Number of instances of word i assigned to topic j:\n\t\t\tthis.nw.set( wt, topic, this.nw.get( wt, topic ) + 1 );\n\n\t\t\t// Number of words in document i assigned to topic j:\n\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\n\t\t\t// Total number of words assigned to topic j:\n\t\t\tthis.nwSum[ topic ] = this.nwSum[ topic ] + 1;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default init;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Calculate weighted average of two matrices.\n*\n* @private\n* @param {Matrix} A - first matrix\n* @param {Matrix} B - second matrix\n* @param {PositiveInteger} weight - relative weight of matrix A\n* @returns {Matrix} averaged matrix\n*/\nfunction avgMatrix( A, B, weight ) {\n\tvar propA;\n\tvar propB;\n\tvar nrow;\n\tvar ncol;\n\tvar val;\n\tvar C;\n\tvar i;\n\tvar j;\n\n\tnrow = A.shape[ 0 ];\n\tncol = A.shape[ 1 ];\n\tC = matrix( [ nrow, ncol ] );\n\tpropA = ( weight - 1.0 ) / weight;\n\tpropB = 1.0 / weight;\n\n\tfor ( i = 0; i < nrow; i++ ) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\tval = (propA * A.get(i, j)) + (propB * B.get(i, j));\n\t\t\tC.set( i, j, val );\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nexport default avgMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/string-format';\nimport randu from '@stdlib/random-base-randu';\nimport avgMatrix from './avg_matrix.js';\n\n\n// MAIN //\n\n/**\n* Fit model using collapsed Gibbs sampling.\n*\n* @private\n* @param {PositiveInteger} iter - number of sampling iterations\n* @param {PositiveInteger} burnin - number of estimates to be thrown away at beginning\n* @param {PositiveInteger} thin - number of discarded in-between iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a positive integer\n*/\nfunction fit( iter, burnin, thin ) {\n\t/* eslint-disable no-invalid-this */\n\tvar kalpha;\n\tvar wbeta;\n\tvar topic;\n\tvar theta;\n\tvar prob;\n\tvar word;\n\tvar phi;\n\tvar len;\n\tvar nt;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar u;\n\tvar w;\n\n\tif ( !isPositiveInteger( iter ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', iter ) );\n\t}\n\tif ( !isPositiveInteger( burnin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', burnin ) );\n\t}\n\tif ( !isPositiveInteger( thin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a positive integer. Value: `%s`.', thin ) );\n\t}\n\n\twbeta = this.W * this.beta;\n\tkalpha = this.K * this.alpha;\n\n\tfor ( i = 0; i < iter; i++ ) {\n\t\tfor ( d = 0; d < this.D; d++ ) {\n\t\t\tfor ( w = 0; w < this.ndSum[ d ]; w++ ) {\n\t\t\t\tword = this.w[ d ][ w ];\n\t\t\t\ttopic = this.z[ d ][ w ];\n\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) - 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) - 1 );\n\t\t\t\tthis.ndSum[ d ] -= 1;\n\t\t\t\tthis.nwSum[ topic ] -= 1;\n\n\t\t\t\tprob = [];\n\t\t\t\tfor ( j = 0; j < this.K; j++ ) {\n\t\t\t\t\tprob.push( ( this.nw.get( word, j ) + this.beta ) /\n\t\t\t\t\t\t( this.nwSum[ j ] + wbeta ) *\n\t\t\t\t\t\t( this.nd.get( d, j ) + this.alpha ) /\n\t\t\t\t\t\t( this.ndSum[ d ] + kalpha ) );\n\t\t\t\t}\n\t\t\t\tfor ( j = 1; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] += prob[ j - 1 ];\n\t\t\t\t}\n\t\t\t\tu = prob[ this.K - 1 ] * randu();\n\t\t\t\ttopic = 0;\n\t\t\t\tfor ( nt = 0; nt < this.K; nt++ ) {\n\t\t\t\t\tif ( prob[ nt ] > u ) {\n\t\t\t\t\t\ttopic = nt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Assign new z_i to counts...\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) + 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\t\t\t\tthis.nwSum[ topic ] += 1;\n\t\t\t\tthis.ndSum[ d ] += 1;\n\n\t\t\t\tthis.z[ d ][ w ] = topic;\n\t\t\t}\n\t\t}\n\n\t\tif ( i % thin === 0 && i > burnin ) {\n\t\t\tphi = this.getPhis();\n\t\t\ttheta = this.getThetas();\n\n\t\t\tthis.phiList.push( phi );\n\t\t\tthis.thetaList.push( theta );\n\n\t\t\tlen = this.phiList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgPhi = phi;\n\t\t\t} else {\n\t\t\t\tthis.avgPhi = avgMatrix( this.avgPhi, phi, len );\n\t\t\t}\n\t\t\tlen = this.thetaList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgTheta = theta;\n\t\t\t} else {\n\t\t\t\tthis.avgTheta = avgMatrix( this.avgTheta, theta, len );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default fit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isStringArray from '@stdlib/assert-is-string-array';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport contains from '@stdlib/assert-contains';\nimport tokenize from '@stdlib/nlp-tokenize';\nimport Int32Array from '@stdlib/array-int32';\nimport format from '@stdlib/string-format';\nimport matrix from './matrix.js';\nimport getThetas from './get_thetas.js';\nimport validate from './validate.js';\nimport getPhis from './get_phis.js';\nimport init from './init.js';\nimport fit from './fit.js';\n\n\n// FUNCTIONS //\n\n/**\n* Find index of the value in vocabulary equal to the supplied search value.\n*\n* @private\n* @param {Array} vocab - vocabulary\n* @param {string} searchVal - search value\n* @returns {integer} index in vocab if search value is found, -1 otherwise\n*/\nfunction findIndex( vocab, searchVal ) {\n\tvar i;\n\tfor ( i = 0; i < vocab.length; i++ ) {\n\t\tif ( vocab[ i ] === searchVal ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @param {StringArray} documents - document corpus\n* @param {PositiveInteger} K - number of topics\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.alpha=50/K] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta=0.1] - Dirichlet hyper-parameter for word vector phi\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} must provide valid options\n* @returns {Object} model object\n*/\nfunction lda( documents, K, options ) {\n\tvar target;\n\tvar vocab;\n\tvar model;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar err;\n\tvar pos;\n\tvar nd;\n\tvar it;\n\tvar wd;\n\tvar D;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar W;\n\tvar w;\n\n\tif ( !isStringArray( documents ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', documents ) );\n\t}\n\tif ( !isPositiveInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of topics must be a positive integer. Value: `%s`.', K ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Number of documents:\n\tD = documents.length;\n\n\t// Hyper-parameter for Dirichlet distribution of topic vector theta:\n\talpha = opts.alpha || 50 / K;\n\n\t// Hyper-parameter of Dirichlet distribution of phi:\n\tbeta = opts.beta || 0.1;\n\n\t// Extract words & construct vocabulary:s\n\tvocab = [];\n\tw = [];\n\tpos = 0;\n\tfor ( d = 0; d < D; d++ ) {\n\t\tw.push( [] );\n\t\twd = tokenize( documents[ d ] );\n\t\tnd = wd.length;\n\t\tfor ( i = 0; i < nd; i++ ) {\n\t\t\ttarget = wd[ i ];\n\t\t\tit = findIndex( vocab, target );\n\t\t\tif ( it === -1 ) {\n\t\t\t\tvocab.push( target );\n\t\t\t\tw[ d ].push( pos );\n\t\t\t\tpos += 1;\n\t\t\t} else {\n\t\t\t\tw[ d ].push( it );\n\t\t\t}\n\t\t}\n\t}\n\t// Size of vocabulary:\n\tW = vocab.length;\n\n\tmodel = {};\n\n\t// Attach read-only properties:\n\tsetReadOnly( model, 'K', K );\n\tsetReadOnly( model, 'D', D );\n\tsetReadOnly( model, 'W', W );\n\tsetReadOnly( model, 'alpha', alpha );\n\tsetReadOnly( model, 'beta', beta );\n\n\t// Attach methods:\n\tsetReadOnly( model, 'init', init );\n\tsetReadOnly( model, 'fit', fit );\n\tsetReadOnly( model, 'getPhis', getPhis );\n\tsetReadOnly( model, 'getThetas', getThetas );\n\tsetReadOnly( model, 'getTerms', getTerms );\n\n\tmodel.nwSum = new Int32Array( K );\n\tmodel.ndSum = new Int32Array( D );\n\tmodel.nw = matrix( [ W, K ], 'int32' );\n\tmodel.nd = matrix( [ D, K ], 'int32' );\n\n\tmodel.phiList = [];\n\tmodel.thetaList = [];\n\n\tmodel.w = w;\n\tmodel.init();\n\n\treturn model;\n\n\t/**\n\t* Get top terms for the specified topic.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} k - topic\n\t* @param {PositiveInteger} [no=10] - number of terms\n\t* @throws {TypeError} first argument must be a nonnegative integer smaller than the total number of topics\n\t* @throws {TypeError} second argument must be a positive integer\n\t* @returns {Array} word probability array\n\t*/\n\tfunction getTerms( k, no ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar skip;\n\t\tvar phi;\n\t\tvar ret;\n\t\tvar max;\n\t\tvar mid;\n\t\tvar i;\n\n\t\tif ( !isNonNegativeInteger( k ) || k >= K ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer which is less than the total number of topics. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( no ) {\n\t\t\tif ( !isPositiveInteger( no ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', no ) );\n\t\t\t}\n\t\t} else {\n\t\t\tno = 10;\n\t\t}\n\n\t\tret = [];\n\t\tskip = [];\n\t\tfor ( i = 0; i < no; i++ ) {\n\t\t\tmax = 0;\n\t\t\tfor ( j = 0; j < this.W; j++ ) {\n\t\t\t\tphi = this.avgPhi.get( k, j );\n\t\t\t\tif ( phi > max && !contains( skip, j ) ) {\n\t\t\t\t\tmax = phi;\n\t\t\t\t\tmid = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tskip.push( mid );\n\t\t\tret.push({\n\t\t\t\t'word': vocab[ mid ],\n\t\t\t\t'prob': max\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default lda;\n"],"names":["matrix","dtype","ndims","shape","data","len","mat","i","arguments","length","Int32Array","Float64Array","strides","offset","nbytes","byteLength","setReadOnly","get","set","j","idx","this","v","getThetas","Theta","val","d","k","D","K","nd","alpha","ndSum","validate","opts","options","isObject","hasOwnProp","isPositive","TypeError","format","beta","getPhis","Phi","w","W","nw","nwSum","init","topic","newz","wt","z","push","floor","randu","avgMatrix","A","B","weight","propA","propB","nrow","ncol","C","fit","iter","burnin","thin","kalpha","wbeta","theta","prob","word","phi","nt","u","isPositiveInteger","phiList","thetaList","avgPhi","avgTheta","findIndex","vocab","searchVal","lda","documents","target","model","err","pos","it","wd","isStringArray","tokenize","getTerms","no","skip","ret","max","mid","isNonNegativeInteger","contains"],"mappings":"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"}
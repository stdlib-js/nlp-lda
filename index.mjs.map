{"version":3,"file":"index.mjs","sources":["../lib/matrix.js","../lib/get_thetas.js","../lib/get_phis.js","../lib/init.js","../lib/avg_matrix.js","../lib/fit.js","../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Int32Array from '@stdlib/array-int32';\nimport Float64Array from '@stdlib/array-float64';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\n\n\n// MAIN //\n\n/**\n* Returns a Matrix instance.\n*\n* @private\n* @constructor\n* @param {NumberArray} shape - matrix dimensions/shape\n* @param {string} [dtype=\"float64\"] - matrix data type\n* @returns {Matrix} Matrix instance\n*/\nfunction matrix() {\n\tvar dtype;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar len;\n\tvar mat;\n\tvar i;\n\n\tif ( arguments.length === 1 ) {\n\t\tshape = arguments[ 0 ];\n\t}\n\telse if ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tdtype = arguments[ 1 ];\n\t}\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Initialize a zero-filled typed array...\n\tif ( dtype === 'int32' ) {\n\t\tdata = new Int32Array( len );\n\t}\n\telse {\n\t\tdata = new Float64Array( len );\n\t}\n\n\t// Return a new Matrix instance:\n\tmat = {};\n\tmat.dtype = dtype;\n\tmat.shape = shape;\n\tmat.strides = [ shape[1], 1 ];\n\tmat.offset = 0;\n\tmat.ndims = shape.length;\n\tmat.length = data.length;\n\tmat.nbytes = data.byteLength;\n\tmat.data = data;\n\n\tsetReadOnly( mat, 'get', get );\n\tsetReadOnly( mat, 'set', set );\n\treturn mat;\n\n\t/**\n\t* Returns a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @returns {(number|undefined)} matrix element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\treturn this.data[ idx ];\n\t}\n\n\t/**\n\t* Sets a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @param {number} v - value to set\n\t* @returns {Matrix} Matrix instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\ti = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\tif ( i >= 0 ) {\n\t\t\tthis.data[ i ] = v;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default matrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Get theta matrix. Its rows correspond to document distributions over topics.\n*\n* @private\n* @returns {Matrix} theta parameter matrix\n*/\nfunction getThetas() {\n\t/* eslint-disable no-invalid-this */\n\tvar Theta;\n\tvar val;\n\tvar d;\n\tvar k;\n\n\tTheta = matrix( [ this.D, this.K ] );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tfor ( k = 0; k < this.K; k++ ) {\n\t\t\tval = ( this.nd.get( d, k ) + this.alpha ) /\n\t\t\t\t( this.ndSum[ d ] + ( this.K*this.alpha ) );\n\t\t\tTheta.set( d, k, val );\n\t\t}\n\t}\n\treturn Theta;\n}\n\n\n// EXPORTS //\n\nexport default getThetas;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Get the phi matrix. Each row is a topic distribution over words.\n*\n* @private\n* @returns {Matrix} phi parameter matrix\n*/\nfunction getPhis() {\n\t/* eslint-disable no-invalid-this */\n\tvar Phi;\n\tvar val;\n\tvar k;\n\tvar w;\n\n\tPhi = matrix( [ this.K, this.W ] );\n\tfor ( k = 0; k < this.K; k++ ) {\n\t\tfor ( w = 0; w < this.W; w++ ) {\n\t\t\tval = ( this.nw.get( w, k ) + this.beta ) /\n\t\t\t\t( this.nwSum[ k ] + ( this.W*this.beta ) );\n\t\t\tPhi.set( k, w, val );\n\t\t}\n\t}\n\treturn Phi;\n}\n\n\n// EXPORTS //\n\nexport default getPhis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport randu from '@stdlib/random-base-randu';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Randomly assign topics to words and keep track of the counts.\n*\n* @private\n*/\nfunction init() {\n\t/* eslint-disable no-invalid-this */\n\tvar topic;\n\tvar newz;\n\tvar len;\n\tvar wt;\n\tvar d;\n\tvar i;\n\n\tthis.z = [];\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tthis.z.push( [] );\n\t\tlen = this.w[ d ].length;\n\n\t\t// Initialize random topics...\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tnewz = floor( randu() * this.K );\n\t\t\tthis.z[ d ].push( newz );\n\t\t}\n\t\tthis.ndSum[ d ] = len;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\twt = this.w[ d ][ i ];\n\t\t\ttopic = this.z[ d ][ i ];\n\n\t\t\t// Number of instances of word i assigned to topic j:\n\t\t\tthis.nw.set( wt, topic, this.nw.get( wt, topic ) + 1 );\n\n\t\t\t// Number of words in document i assigned to topic j:\n\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\n\t\t\t// Total number of words assigned to topic j:\n\t\t\tthis.nwSum[ topic ] = this.nwSum[ topic ] + 1;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default init;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport matrix from './matrix.js';\n\n\n// MAIN //\n\n/**\n* Calculate weighted average of two matrices.\n*\n* @private\n* @param {Matrix} A - first matrix\n* @param {Matrix} B - second matrix\n* @param {PositiveInteger} weight - relative weight of matrix A\n* @returns {Matrix} averaged matrix\n*/\nfunction avgMatrix( A, B, weight ) {\n\tvar propA;\n\tvar propB;\n\tvar nrow;\n\tvar ncol;\n\tvar val;\n\tvar C;\n\tvar i;\n\tvar j;\n\n\tnrow = A.shape[ 0 ];\n\tncol = A.shape[ 1 ];\n\tC = matrix( [ nrow, ncol ] );\n\tpropA = ( weight - 1.0 ) / weight;\n\tpropB = 1.0 / weight;\n\n\tfor ( i = 0; i < nrow; i++ ) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\tval = (propA * A.get(i, j)) + (propB * B.get(i, j));\n\t\t\tC.set( i, j, val );\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nexport default avgMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport randu from '@stdlib/random-base-randu';\nimport avgMatrix from './avg_matrix.js';\n\n\n// MAIN //\n\n/**\n* Fit model using collapsed Gibbs sampling.\n*\n* @private\n* @param {PositiveInteger} iter - number of sampling iterations\n* @param {PositiveInteger} burnin - number of estimates to be thrown away at beginning\n* @param {PositiveInteger} thin - number of discarded in-between iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a positive integer\n*/\nfunction fit( iter, burnin, thin ) {\n\t/* eslint-disable no-invalid-this */\n\tvar kalpha;\n\tvar wbeta;\n\tvar topic;\n\tvar theta;\n\tvar prob;\n\tvar word;\n\tvar phi;\n\tvar len;\n\tvar nt;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar u;\n\tvar w;\n\n\tif ( !isPositiveInteger( iter ) ) {\n\t\tthrow new TypeError( format( '0kV4b', iter ) );\n\t}\n\tif ( !isPositiveInteger( burnin ) ) {\n\t\tthrow new TypeError( format( '0kV45', burnin ) );\n\t}\n\tif ( !isPositiveInteger( thin ) ) {\n\t\tthrow new TypeError( format( '0kV5x', thin ) );\n\t}\n\n\twbeta = this.W * this.beta;\n\tkalpha = this.K * this.alpha;\n\n\tfor ( i = 0; i < iter; i++ ) {\n\t\tfor ( d = 0; d < this.D; d++ ) {\n\t\t\tfor ( w = 0; w < this.ndSum[ d ]; w++ ) {\n\t\t\t\tword = this.w[ d ][ w ];\n\t\t\t\ttopic = this.z[ d ][ w ];\n\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) - 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) - 1 );\n\t\t\t\tthis.ndSum[ d ] -= 1;\n\t\t\t\tthis.nwSum[ topic ] -= 1;\n\n\t\t\t\tprob = [];\n\t\t\t\tfor ( j = 0; j < this.K; j++ ) {\n\t\t\t\t\tprob.push( ( this.nw.get( word, j ) + this.beta ) /\n\t\t\t\t\t\t( this.nwSum[ j ] + wbeta ) *\n\t\t\t\t\t\t( this.nd.get( d, j ) + this.alpha ) /\n\t\t\t\t\t\t( this.ndSum[ d ] + kalpha ) );\n\t\t\t\t}\n\t\t\t\tfor ( j = 1; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] += prob[ j - 1 ];\n\t\t\t\t}\n\t\t\t\tu = prob[ this.K - 1 ] * randu();\n\t\t\t\ttopic = 0;\n\t\t\t\tfor ( nt = 0; nt < this.K; nt++ ) {\n\t\t\t\t\tif ( prob[ nt ] > u ) {\n\t\t\t\t\t\ttopic = nt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Assign new z_i to counts...\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) + 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\t\t\t\tthis.nwSum[ topic ] += 1;\n\t\t\t\tthis.ndSum[ d ] += 1;\n\n\t\t\t\tthis.z[ d ][ w ] = topic;\n\t\t\t}\n\t\t}\n\n\t\tif ( i % thin === 0 && i > burnin ) {\n\t\t\tphi = this.getPhis();\n\t\t\ttheta = this.getThetas();\n\n\t\t\tthis.phiList.push( phi );\n\t\t\tthis.thetaList.push( theta );\n\n\t\t\tlen = this.phiList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgPhi = phi;\n\t\t\t} else {\n\t\t\t\tthis.avgPhi = avgMatrix( this.avgPhi, phi, len );\n\t\t\t}\n\t\t\tlen = this.thetaList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgTheta = theta;\n\t\t\t} else {\n\t\t\t\tthis.avgTheta = avgMatrix( this.avgTheta, theta, len );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default fit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isStringArray from '@stdlib/assert-is-string-array';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport contains from '@stdlib/assert-contains';\nimport tokenize from '@stdlib/nlp-tokenize';\nimport Int32Array from '@stdlib/array-int32';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport matrix from './matrix.js';\nimport getThetas from './get_thetas.js';\nimport validate from './validate.js';\nimport getPhis from './get_phis.js';\nimport init from './init.js';\nimport fit from './fit.js';\n\n\n// FUNCTIONS //\n\n/**\n* Find index of the value in vocabulary equal to the supplied search value.\n*\n* @private\n* @param {Array} vocab - vocabulary\n* @param {string} searchVal - search value\n* @returns {integer} index in vocab if search value is found, -1 otherwise\n*/\nfunction findIndex( vocab, searchVal ) {\n\tvar i;\n\tfor ( i = 0; i < vocab.length; i++ ) {\n\t\tif ( vocab[ i ] === searchVal ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @param {StringArray} documents - document corpus\n* @param {PositiveInteger} K - number of topics\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.alpha=50/K] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta=0.1] - Dirichlet hyper-parameter for word vector phi\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} must provide valid options\n* @returns {Object} model object\n*/\nfunction lda( documents, K, options ) {\n\tvar target;\n\tvar vocab;\n\tvar model;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar err;\n\tvar pos;\n\tvar nd;\n\tvar it;\n\tvar wd;\n\tvar D;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar W;\n\tvar w;\n\n\tif ( !isStringArray( documents ) ) {\n\t\tthrow new TypeError( format( '0kV3s', documents ) );\n\t}\n\tif ( !isPositiveInteger( K ) ) {\n\t\tthrow new TypeError( format( '0kV5y', K ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Number of documents:\n\tD = documents.length;\n\n\t// Hyper-parameter for Dirichlet distribution of topic vector theta:\n\talpha = opts.alpha || 50 / K;\n\n\t// Hyper-parameter of Dirichlet distribution of phi:\n\tbeta = opts.beta || 0.1;\n\n\t// Extract words & construct vocabulary:s\n\tvocab = [];\n\tw = [];\n\tpos = 0;\n\tfor ( d = 0; d < D; d++ ) {\n\t\tw.push( [] );\n\t\twd = tokenize( documents[ d ] );\n\t\tnd = wd.length;\n\t\tfor ( i = 0; i < nd; i++ ) {\n\t\t\ttarget = wd[ i ];\n\t\t\tit = findIndex( vocab, target );\n\t\t\tif ( it === -1 ) {\n\t\t\t\tvocab.push( target );\n\t\t\t\tw[ d ].push( pos );\n\t\t\t\tpos += 1;\n\t\t\t} else {\n\t\t\t\tw[ d ].push( it );\n\t\t\t}\n\t\t}\n\t}\n\t// Size of vocabulary:\n\tW = vocab.length;\n\n\tmodel = {};\n\n\t// Attach read-only properties:\n\tsetReadOnly( model, 'K', K );\n\tsetReadOnly( model, 'D', D );\n\tsetReadOnly( model, 'W', W );\n\tsetReadOnly( model, 'alpha', alpha );\n\tsetReadOnly( model, 'beta', beta );\n\n\t// Attach methods:\n\tsetReadOnly( model, 'init', init );\n\tsetReadOnly( model, 'fit', fit );\n\tsetReadOnly( model, 'getPhis', getPhis );\n\tsetReadOnly( model, 'getThetas', getThetas );\n\tsetReadOnly( model, 'getTerms', getTerms );\n\n\tmodel.nwSum = new Int32Array( K );\n\tmodel.ndSum = new Int32Array( D );\n\tmodel.nw = matrix( [ W, K ], 'int32' );\n\tmodel.nd = matrix( [ D, K ], 'int32' );\n\n\tmodel.phiList = [];\n\tmodel.thetaList = [];\n\n\tmodel.w = w;\n\tmodel.init();\n\n\treturn model;\n\n\t/**\n\t* Get top terms for the specified topic.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} k - topic\n\t* @param {PositiveInteger} [no=10] - number of terms\n\t* @throws {TypeError} first argument must be a nonnegative integer smaller than the total number of topics\n\t* @throws {TypeError} second argument must be a positive integer\n\t* @returns {Array} word probability array\n\t*/\n\tfunction getTerms( k, no ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar skip;\n\t\tvar phi;\n\t\tvar ret;\n\t\tvar max;\n\t\tvar mid;\n\t\tvar i;\n\n\t\tif ( !isNonNegativeInteger( k ) || k >= K ) {\n\t\t\tthrow new TypeError( format( '0kV5z', k ) );\n\t\t}\n\t\tif ( no ) {\n\t\t\tif ( !isPositiveInteger( no ) ) {\n\t\t\t\tthrow new TypeError( format( '0kV45', no ) );\n\t\t\t}\n\t\t} else {\n\t\t\tno = 10;\n\t\t}\n\n\t\tret = [];\n\t\tskip = [];\n\t\tfor ( i = 0; i < no; i++ ) {\n\t\t\tmax = 0;\n\t\t\tfor ( j = 0; j < this.W; j++ ) {\n\t\t\t\tphi = this.avgPhi.get( k, j );\n\t\t\t\tif ( phi > max && !contains( skip, j ) ) {\n\t\t\t\t\tmax = phi;\n\t\t\t\t\tmid = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tskip.push( mid );\n\t\t\tret.push({\n\t\t\t\t'word': vocab[ mid ],\n\t\t\t\t'prob': max\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default lda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0kV2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isPositive( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0kV4D', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'beta' ) ) {\n\t\topts.beta = options.beta;\n\t\tif ( !isPositive( opts.beta ) ) {\n\t\t\treturn new TypeError( format( '0kV4D', 'beta', opts.beta ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["matrix","dtype","ndims","shape","data","len","mat","i","arguments","length","Int32Array","Float64Array","strides","offset","nbytes","byteLength","setReadOnly","j","idx","this","v","getThetas","Theta","val","d","k","D","K","nd","get","alpha","ndSum","set","getPhis","Phi","w","W","nw","beta","nwSum","init","topic","newz","wt","z","push","floor","randu","avgMatrix","A","B","weight","propA","propB","nrow","ncol","C","fit","iter","burnin","thin","kalpha","wbeta","theta","prob","word","phi","nt","u","isPositiveInteger","TypeError","format","phiList","thetaList","avgPhi","avgTheta","findIndex","vocab","searchVal","lda","documents","options","target","model","opts","err","pos","it","wd","isStringArray","isObject","hasOwnProp","isPositive","validate","tokenize","no","skip","ret","max","mid","isNonNegativeInteger","contains"],"mappings":"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"}
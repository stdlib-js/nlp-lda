{
  "version": 3,
  "sources": ["../lib/matrix.js", "../lib/get_thetas.js", "../lib/validate.js", "../lib/get_phis.js", "../lib/init.js", "../lib/avg_matrix.js", "../lib/fit.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Int32Array = require( '@stdlib/array-int32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Returns a Matrix instance.\n*\n* @private\n* @constructor\n* @param {NumberArray} shape - matrix dimensions/shape\n* @param {string} [dtype=\"float64\"] - matrix data type\n* @returns {Matrix} Matrix instance\n*/\nfunction matrix() {\n\tvar dtype;\n\tvar ndims;\n\tvar shape;\n\tvar data;\n\tvar len;\n\tvar mat;\n\tvar i;\n\n\tif ( arguments.length === 1 ) {\n\t\tshape = arguments[ 0 ];\n\t}\n\telse if ( arguments.length === 2 ) {\n\t\tshape = arguments[ 0 ];\n\t\tdtype = arguments[ 1 ];\n\t}\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Initialize a zero-filled typed array...\n\tif ( dtype === 'int32' ) {\n\t\tdata = new Int32Array( len );\n\t}\n\telse {\n\t\tdata = new Float64Array( len );\n\t}\n\n\t// Return a new Matrix instance:\n\tmat = {};\n\tmat.dtype = dtype;\n\tmat.shape = shape;\n\tmat.strides = [ shape[1], 1 ];\n\tmat.offset = 0;\n\tmat.ndims = shape.length;\n\tmat.length = data.length;\n\tmat.nbytes = data.byteLength;\n\tmat.data = data;\n\n\tsetReadOnly( mat, 'get', get );\n\tsetReadOnly( mat, 'set', set );\n\treturn mat;\n\n\t/**\n\t* Returns a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @returns {(number|undefined)} matrix element\n\t*/\n\tfunction get( i, j ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar idx = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\treturn this.data[ idx ];\n\t}\n\n\t/**\n\t* Sets a matrix element based on the provided row and column indices.\n\t*\n\t* @private\n\t* @param {integer} i - row index\n\t* @param {integer} j - column index\n\t* @param {number} v - value to set\n\t* @returns {Matrix} Matrix instance\n\t*/\n\tfunction set( i, j, v ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\ti = this.offset + ( i*this.strides[0] ) + ( j*this.strides[1] );\n\t\tif ( i >= 0 ) {\n\t\t\tthis.data[ i ] = v;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = matrix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Get theta matrix. Its rows correspond to document distributions over topics.\n*\n* @private\n* @returns {Matrix} theta parameter matrix\n*/\nfunction getThetas() {\n\t/* eslint-disable no-invalid-this */\n\tvar Theta;\n\tvar val;\n\tvar d;\n\tvar k;\n\n\tTheta = matrix( [ this.D, this.K ] );\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tfor ( k = 0; k < this.K; k++ ) {\n\t\t\tval = ( this.nd.get( d, k ) + this.alpha ) /\n\t\t\t\t( this.ndSum[ d ] + ( this.K*this.alpha ) );\n\t\t\tTheta.set( d, k, val );\n\t\t}\n\t}\n\treturn Theta;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getThetas;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.alpha] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta] - Dirichlet hyper-parameter for word vector phi\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {};\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isPositive( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'beta' ) ) {\n\t\topts.beta = options.beta;\n\t\tif ( !isPositive( opts.beta ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'beta', opts.beta ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Get the phi matrix. Each row is a topic distribution over words.\n*\n* @private\n* @returns {Matrix} phi parameter matrix\n*/\nfunction getPhis() {\n\t/* eslint-disable no-invalid-this */\n\tvar Phi;\n\tvar val;\n\tvar k;\n\tvar w;\n\n\tPhi = matrix( [ this.K, this.W ] );\n\tfor ( k = 0; k < this.K; k++ ) {\n\t\tfor ( w = 0; w < this.W; w++ ) {\n\t\t\tval = ( this.nw.get( w, k ) + this.beta ) /\n\t\t\t\t( this.nwSum[ k ] + ( this.W*this.beta ) );\n\t\t\tPhi.set( k, w, val );\n\t\t}\n\t}\n\treturn Phi;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getPhis;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar randu = require( '@stdlib/random-base-randu' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Randomly assign topics to words and keep track of the counts.\n*\n* @private\n*/\nfunction init() {\n\t/* eslint-disable no-invalid-this */\n\tvar topic;\n\tvar newz;\n\tvar len;\n\tvar wt;\n\tvar d;\n\tvar i;\n\n\tthis.z = [];\n\tfor ( d = 0; d < this.D; d++ ) {\n\t\tthis.z.push( [] );\n\t\tlen = this.w[ d ].length;\n\n\t\t// Initialize random topics...\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tnewz = floor( randu() * this.K );\n\t\t\tthis.z[ d ].push( newz );\n\t\t}\n\t\tthis.ndSum[ d ] = len;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\twt = this.w[ d ][ i ];\n\t\t\ttopic = this.z[ d ][ i ];\n\n\t\t\t// Number of instances of word i assigned to topic j:\n\t\t\tthis.nw.set( wt, topic, this.nw.get( wt, topic ) + 1 );\n\n\t\t\t// Number of words in document i assigned to topic j:\n\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\n\t\t\t// Total number of words assigned to topic j:\n\t\t\tthis.nwSum[ topic ] = this.nwSum[ topic ] + 1;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = init;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar matrix = require( './matrix.js' );\n\n\n// MAIN //\n\n/**\n* Calculate weighted average of two matrices.\n*\n* @private\n* @param {Matrix} A - first matrix\n* @param {Matrix} B - second matrix\n* @param {PositiveInteger} weight - relative weight of matrix A\n* @returns {Matrix} averaged matrix\n*/\nfunction avgMatrix( A, B, weight ) {\n\tvar propA;\n\tvar propB;\n\tvar nrow;\n\tvar ncol;\n\tvar val;\n\tvar C;\n\tvar i;\n\tvar j;\n\n\tnrow = A.shape[ 0 ];\n\tncol = A.shape[ 1 ];\n\tC = matrix( [ nrow, ncol ] );\n\tpropA = ( weight - 1.0 ) / weight;\n\tpropB = 1.0 / weight;\n\n\tfor ( i = 0; i < nrow; i++ ) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\tval = (propA * A.get(i, j)) + (propB * B.get(i, j));\n\t\t\tC.set( i, j, val );\n\t\t}\n\t}\n\treturn C;\n}\n\n\n// EXPORTS //\n\nmodule.exports = avgMatrix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar format = require( '@stdlib/string-format' );\nvar randu = require( '@stdlib/random-base-randu' );\nvar avgMatrix = require( './avg_matrix.js' );\n\n\n// MAIN //\n\n/**\n* Fit model using collapsed Gibbs sampling.\n*\n* @private\n* @param {PositiveInteger} iter - number of sampling iterations\n* @param {PositiveInteger} burnin - number of estimates to be thrown away at beginning\n* @param {PositiveInteger} thin - number of discarded in-between iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a positive integer\n*/\nfunction fit( iter, burnin, thin ) {\n\t/* eslint-disable no-invalid-this */\n\tvar kalpha;\n\tvar wbeta;\n\tvar topic;\n\tvar theta;\n\tvar prob;\n\tvar word;\n\tvar phi;\n\tvar len;\n\tvar nt;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar u;\n\tvar w;\n\n\tif ( !isPositiveInteger( iter ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', iter ) );\n\t}\n\tif ( !isPositiveInteger( burnin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', burnin ) );\n\t}\n\tif ( !isPositiveInteger( thin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a positive integer. Value: `%s`.', thin ) );\n\t}\n\n\twbeta = this.W * this.beta;\n\tkalpha = this.K * this.alpha;\n\n\tfor ( i = 0; i < iter; i++ ) {\n\t\tfor ( d = 0; d < this.D; d++ ) {\n\t\t\tfor ( w = 0; w < this.ndSum[ d ]; w++ ) {\n\t\t\t\tword = this.w[ d ][ w ];\n\t\t\t\ttopic = this.z[ d ][ w ];\n\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) - 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) - 1 );\n\t\t\t\tthis.ndSum[ d ] -= 1;\n\t\t\t\tthis.nwSum[ topic ] -= 1;\n\n\t\t\t\tprob = [];\n\t\t\t\tfor ( j = 0; j < this.K; j++ ) {\n\t\t\t\t\tprob.push( ( this.nw.get( word, j ) + this.beta ) /\n\t\t\t\t\t\t( this.nwSum[ j ] + wbeta ) *\n\t\t\t\t\t\t( this.nd.get( d, j ) + this.alpha ) /\n\t\t\t\t\t\t( this.ndSum[ d ] + kalpha ) );\n\t\t\t\t}\n\t\t\t\tfor ( j = 1; j < this.K; j++ ) {\n\t\t\t\t\tprob[ j ] += prob[ j - 1 ];\n\t\t\t\t}\n\t\t\t\tu = prob[ this.K - 1 ] * randu();\n\t\t\t\ttopic = 0;\n\t\t\t\tfor ( nt = 0; nt < this.K; nt++ ) {\n\t\t\t\t\tif ( prob[ nt ] > u ) {\n\t\t\t\t\t\ttopic = nt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Assign new z_i to counts...\n\t\t\t\tthis.nw.set( word, topic, this.nw.get( word, topic ) + 1 );\n\t\t\t\tthis.nd.set( d, topic, this.nd.get( d, topic ) + 1 );\n\t\t\t\tthis.nwSum[ topic ] += 1;\n\t\t\t\tthis.ndSum[ d ] += 1;\n\n\t\t\t\tthis.z[ d ][ w ] = topic;\n\t\t\t}\n\t\t}\n\n\t\tif ( i % thin === 0 && i > burnin ) {\n\t\t\tphi = this.getPhis();\n\t\t\ttheta = this.getThetas();\n\n\t\t\tthis.phiList.push( phi );\n\t\t\tthis.thetaList.push( theta );\n\n\t\t\tlen = this.phiList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgPhi = phi;\n\t\t\t} else {\n\t\t\t\tthis.avgPhi = avgMatrix( this.avgPhi, phi, len );\n\t\t\t}\n\t\t\tlen = this.thetaList.length;\n\t\t\tif ( len === 1 ) {\n\t\t\t\tthis.avgTheta = theta;\n\t\t\t} else {\n\t\t\t\tthis.avgTheta = avgMatrix( this.avgTheta, theta, len );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = fit;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar tokenize = require( '@stdlib/nlp-tokenize' );\nvar Int32Array = require( '@stdlib/array-int32' );\nvar format = require( '@stdlib/string-format' );\nvar matrix = require( './matrix.js' );\nvar getThetas = require( './get_thetas.js' );\nvar validate = require( './validate.js' );\nvar getPhis = require( './get_phis.js' );\nvar init = require( './init.js' );\nvar fit = require( './fit.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Find index of the value in vocabulary equal to the supplied search value.\n*\n* @private\n* @param {Array} vocab - vocabulary\n* @param {string} searchVal - search value\n* @returns {integer} index in vocab if search value is found, -1 otherwise\n*/\nfunction findIndex( vocab, searchVal ) {\n\tvar i;\n\tfor ( i = 0; i < vocab.length; i++ ) {\n\t\tif ( vocab[ i ] === searchVal ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @param {StringArray} documents - document corpus\n* @param {PositiveInteger} K - number of topics\n* @param {Options} [options] - options object\n* @param {PositiveNumber} [options.alpha=50/K] - Dirichlet hyper-parameter of topic vector theta:\n* @param {PositiveNumber} [options.beta=0.1] - Dirichlet hyper-parameter for word vector phi\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} must provide valid options\n* @returns {Object} model object\n*/\nfunction lda( documents, K, options ) {\n\tvar target;\n\tvar vocab;\n\tvar model;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar err;\n\tvar pos;\n\tvar nd;\n\tvar it;\n\tvar wd;\n\tvar D;\n\tvar d;\n\tvar i;\n\tvar j;\n\tvar W;\n\tvar w;\n\n\tif ( !isStringArray( documents ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', documents ) );\n\t}\n\tif ( !isPositiveInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of topics must be a positive integer. Value: `%s`.', K ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Number of documents:\n\tD = documents.length;\n\n\t// Hyper-parameter for Dirichlet distribution of topic vector theta:\n\talpha = opts.alpha || 50 / K;\n\n\t// Hyper-parameter of Dirichlet distribution of phi:\n\tbeta = opts.beta || 0.1;\n\n\t// Extract words & construct vocabulary:s\n\tvocab = [];\n\tw = [];\n\tpos = 0;\n\tfor ( d = 0; d < D; d++ ) {\n\t\tw.push( [] );\n\t\twd = tokenize( documents[ d ] );\n\t\tnd = wd.length;\n\t\tfor ( i = 0; i < nd; i++ ) {\n\t\t\ttarget = wd[ i ];\n\t\t\tit = findIndex( vocab, target );\n\t\t\tif ( it === -1 ) {\n\t\t\t\tvocab.push( target );\n\t\t\t\tw[ d ].push( pos );\n\t\t\t\tpos += 1;\n\t\t\t} else {\n\t\t\t\tw[ d ].push( it );\n\t\t\t}\n\t\t}\n\t}\n\t// Size of vocabulary:\n\tW = vocab.length;\n\n\tmodel = {};\n\n\t// Attach read-only properties:\n\tsetReadOnly( model, 'K', K );\n\tsetReadOnly( model, 'D', D );\n\tsetReadOnly( model, 'W', W );\n\tsetReadOnly( model, 'alpha', alpha );\n\tsetReadOnly( model, 'beta', beta );\n\n\t// Attach methods:\n\tsetReadOnly( model, 'init', init );\n\tsetReadOnly( model, 'fit', fit );\n\tsetReadOnly( model, 'getPhis', getPhis );\n\tsetReadOnly( model, 'getThetas', getThetas );\n\tsetReadOnly( model, 'getTerms', getTerms );\n\n\tmodel.nwSum = new Int32Array( K );\n\tmodel.ndSum = new Int32Array( D );\n\tmodel.nw = matrix( [ W, K ], 'int32' );\n\tmodel.nd = matrix( [ D, K ], 'int32' );\n\n\tmodel.phiList = [];\n\tmodel.thetaList = [];\n\n\tmodel.w = w;\n\tmodel.init();\n\n\treturn model;\n\n\t/**\n\t* Get top terms for the specified topic.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} k - topic\n\t* @param {PositiveInteger} [no=10] - number of terms\n\t* @throws {TypeError} first argument must be a nonnegative integer smaller than the total number of topics\n\t* @throws {TypeError} second argument must be a positive integer\n\t* @returns {Array} word probability array\n\t*/\n\tfunction getTerms( k, no ) {\n\t\t/* eslint-disable no-invalid-this */\n\t\tvar skip;\n\t\tvar phi;\n\t\tvar ret;\n\t\tvar max;\n\t\tvar mid;\n\t\tvar i;\n\n\t\tif ( !isNonNegativeInteger( k ) || k >= K ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer which is less than the total number of topics. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( no ) {\n\t\t\tif ( !isPositiveInteger( no ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', no ) );\n\t\t\t}\n\t\t} else {\n\t\t\tno = 10;\n\t\t}\n\n\t\tret = [];\n\t\tskip = [];\n\t\tfor ( i = 0; i < no; i++ ) {\n\t\t\tmax = 0;\n\t\t\tfor ( j = 0; j < this.W; j++ ) {\n\t\t\t\tphi = this.avgPhi.get( k, j );\n\t\t\t\tif ( phi > max && !contains( skip, j ) ) {\n\t\t\t\t\tmax = phi;\n\t\t\t\t\tmid = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tskip.push( mid );\n\t\t\tret.push({\n\t\t\t\t'word': vocab[ mid ],\n\t\t\t\t'prob': max\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = lda;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Latent Dirichlet Allocation via collapsed Gibbs sampling.\n*\n* @module @stdlib/nlp-lda\n*\n* @example\n* var lda = require( '@stdlib/nlp-lda' );\n*\n* var words;\n* var model;\n* var docs;\n*\n* docs = [\n*     'I loved you first',\n*     'For one is both and both are one in love',\n*     'You never see my pain',\n*     'My love is such that rivers cannot quench',\n*     'See a lot of pain, a lot of tears'\n* ];\n*\n* model = lda( docs, 2 );\n* // returns {}\n*\n* model.fit( 1000, 100, 10 );\n*\n* words = getTerms( 0, 3 );\n* // e.g., returns [ { word: 'both', prob: ~0.0632 }, { word: 'pain', prob: ~0.0552 }, ... ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_matrix", "__commonJSMin", "exports", "module", "Int32Array", "Float64Array", "setReadOnly", "matrix", "dtype", "ndims", "shape", "data", "len", "mat", "i", "get", "set", "j", "idx", "v", "require_get_thetas", "__commonJSMin", "exports", "module", "matrix", "getThetas", "Theta", "val", "d", "k", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "isObject", "hasOwnProp", "format", "validate", "opts", "options", "require_get_phis", "__commonJSMin", "exports", "module", "matrix", "getPhis", "Phi", "val", "k", "w", "require_init", "__commonJSMin", "exports", "module", "randu", "floor", "init", "topic", "newz", "len", "wt", "d", "i", "require_avg_matrix", "__commonJSMin", "exports", "module", "matrix", "avgMatrix", "A", "B", "weight", "propA", "propB", "nrow", "ncol", "val", "C", "i", "j", "require_fit", "__commonJSMin", "exports", "module", "isPositiveInteger", "format", "randu", "avgMatrix", "fit", "iter", "burnin", "thin", "kalpha", "wbeta", "topic", "theta", "prob", "word", "phi", "len", "nt", "d", "i", "j", "u", "w", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isPositiveInteger", "isStringArray", "setReadOnly", "contains", "tokenize", "Int32Array", "format", "matrix", "getThetas", "validate", "getPhis", "init", "fit", "findIndex", "vocab", "searchVal", "i", "lda", "documents", "K", "options", "target", "model", "alpha", "beta", "opts", "err", "pos", "nd", "it", "wd", "D", "d", "j", "W", "w", "getTerms", "k", "no", "skip", "phi", "ret", "max", "mid", "main"]
}
